<launch>

  <include file="$(find m1n6s200_moveit_config)/launch/planning_context.launch" />

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find m1n6s200_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="joint_states_ns"/>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find m1n6s200_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <arg name="controller_manager"/> 
  <include ns="move_group" file="$(find m1n6s200_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="$(arg controller_manager)"/>
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find m1n6s200_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="m1n6s200" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <rosparam command="load" file="$(find chris_kinova_bringup)/param/sensor.yaml" />
    <param name="octomap_frame" type="string" value="move_group/monitored_planning_scene" />
    <param name="octomap_resolution" type="double" value="0.05" />
    <param name="max_range" type="double" value="5.0" />
    <param name="end_effector_base_link" type="string" value="m1n6s200_link_6" />

    <!-- MoveGroup capabilities to load -->
     <!-- Additional MoveGroup capabilities to load -->
    <param name="capabilities" value="
              flexible_manipulation/MoveGroupExtendedAction
              flexible_manipulation/GetPlanningGroupConfigAction
              flexible_manipulation/OctomapAccessCapability
              flexible_manipulation/ClearOctomapCapability
              flexible_manipulation/ApplyPlanningSceneCapability
              flexible_manipulation/ExecuteKnownTrajectoryCapability
              flexible_manipulation/GetCartesianPathCapability
              flexible_manipulation/GetPlanningSceneCapability
              flexible_manipulation/KinematicsCapability
              flexible_manipulation/MoveGroupPlanCapability
              flexible_manipulation/QueryPlannersCapability
              flexible_manipulation/StateValidationCapability
              move_group/MoveGroupMoveAction
              move_group/MoveGroupPickPlaceAction
              move_group/MoveGroupCartesianPathService
             "
              />

    <!-- Disable the default capabilities -->
    <param name="disable_capabilities" value="
              move_group/ClearOctomapService
              move_group/ApplyPlanningSceneService
              move_group/MoveGroupExecuteTrajectoryAction
              move_group/MoveGroupCartesianPathService
              move_group/MoveGroupPlanService
              move_group/MoveGroupGetPlanningSceneService
              move_group/MoveGroupKinematicsService
              move_group/MoveGroupQueryPlannersService
              move_group/MoveGroupStateValidationService
              " />

 
    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    
    <remap from="/joint_states" to="$(arg joint_states_ns)" />
  </node>

</launch>
