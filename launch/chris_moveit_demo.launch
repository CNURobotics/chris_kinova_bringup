<launch>
  <arg name="kinova_robotType" default="$(optenv KINOVA_ARM m1n6s200)" />
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="debug" default="false" />  <!-- By default, we are not in debug mode -->
  <arg name="verbose" default="$(arg debug)" />
  <arg name="moveit_config" default="$(arg kinova_robotType)_moveit_config" />

  <!-- This is a stripped down version of m1n6s200_moveit_demo.launch
       By default, we do not start a database (it can be large)
       and do not load the robot description because out setup includes sensor
       locations.

       Controllers are started separately.
  -->

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <param name="robot_description_semantic" textfile="$(find chris_kinova_bringup)/param/chris_kinova_lab.srdf" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find chris_kinova_bringup)/param/joint_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <group ns="robot_description_kinematics">
    <rosparam command="load" file="$(find m1n6s200_moveit_config)/config/kinematics.yaml"/>
  </group>

  <!-- GDB Debug Option -->
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
     value="gdb -x $(find m1n6s200_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg unless="$(arg verbose)" name="command_args" value="" />
  <arg     if="$(arg verbose)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find m1n6s200_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find m1n6s200_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="m1n6s200" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <rosparam command="load" file="$(find chris_kinova_bringup)/param/sensor.yaml" />
    <param name="octomap_frame" type="string" value="move_group/monitored_planning_scene" />
    <param name="octomap_resolution" type="double" value="0.05" />
    <param name="max_range" type="double" value="5.0" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
              move_group/MoveGroupExecuteTrajectoryAction
              move_group/MoveGroupKinematicsService
              move_group/MoveGroupMoveAction
              move_group/MoveGroupPickPlaceAction
              move_group/MoveGroupPlanService
              move_group/MoveGroupQueryPlannersService
              move_group/MoveGroupStateValidationService
              move_group/MoveGroupGetPlanningSceneService
              move_group/ApplyPlanningSceneService
              move_group/ClearOctomapService
              "
              />
              <!--
              move_group/MoveGroupManipulationAction
              move_group/RobotStateRetrievalCapability
              move_group/OctomapAccessCapability
              -->

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />

    <remap from="/joint_states" to="/m1n6s200_driver/joint_states" />
  </node>


  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find chris_kinova_bringup)/param/chris_kinova_rviz.rviz"/>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <!--rosparam file="$(find chris_kinova_bringup)/param/chris_kinova_rviz.rviz">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </rosparam-->




</launch>
